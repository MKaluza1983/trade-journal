import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'checkstyle'
    id 'idea'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.openapi.generator' version '7.0.0'
}

group = 'de.kaluza'
version = '1.0'

java {
    sourceCompatibility = '21'
}

ext {
    liquibaseChangeLogFile = './src/main/resources/liquibase/Main.xml'
    liquibaseDbUrl = 'jdbc:postgresql://localhost:5432/microservice'
    liquibaseDbUsername = 'username'
    liquibaseDbPassword = 'password'
    checkstyleToolVersion = '10.12.1'
    jacocoToolVersion = '0.8.9'
    springCloudVersion = '2022.0.3'
    jacocoExcludedPackages = [
            "dev/kaluza/commons/domains/**",
            "dev/kaluza/generated/**"
    ]
    runList = project.hasProperty('runList') ? project.getProperty('runList') : 'main'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

checkstyle {
    toolVersion project.ext.checkstyleToolVersion
    config project.resources.text.fromFile("quality-assurance/checkstyle.xml")
}

tasks.withType(Checkstyle) {
    def genPath = file("$buildDir/generated").absolutePath
    exclude { FileTreeElement el ->
        return el.file.absolutePath.startsWith(genPath)
    }
    reports {
        html.required = true
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testAnnotationProcessor.extendsFrom annotationProcessor

    itestImplementation.extendsFrom testImplementation
    itestRuntimeOnly.extendsFrom testRuntimeOnly
    itestAnnotationProcessor.extendsFrom annotationProcessor

    ctestImplementation.extendsFrom testImplementation
    ctestRuntimeOnly.extendsFrom testRuntimeOnly
    ctestAnnotationProcessor.extendsFrom annotationProcessor

    liquibaseRuntime.extendsFrom runtime
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation "io.swagger.core.v3:swagger-annotations:2.2.9"
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.projectlombok:lombok'

    itestImplementation 'org.springframework.boot:spring-boot-starter-test'
    itestImplementation 'org.assertj:assertj-core:3.24.2'
    itestImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    itestImplementation 'org.testcontainers:postgresql'
    itestImplementation 'org.projectlombok:lombok'

    ctestImplementation 'org.springframework.boot:spring-boot-starter-test'
    ctestImplementation 'org.assertj:assertj-core:3.24.2'
    ctestImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    ctestImplementation 'org.testcontainers:postgresql'
    ctestImplementation 'org.projectlombok:lombok'

    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.3'
    liquibaseRuntime 'info.picocli:picocli:4.6.1'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.20.0'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'ch.qos.logback:logback-core'
    liquibaseRuntime 'ch.qos.logback:logback-classic'
    liquibaseRuntime 'jakarta.xml.bind:jakarta.xml.bind-api'

    liquibaseRuntime sourceSets.main.output

    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleToolVersion}"
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated/src/main/java"
        resources.srcDirs += "$buildDir/generated/src/main/resources"
    }
    itest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    ctest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

idea {
    module {
        testSources.from(
                sourceSets.itest.java.srcDirs,
                sourceSets.itest.resources.srcDirs,
                sourceSets.ctest.java.srcDirs,
                sourceSets.ctest.resources.srcDirs
        )
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion project.ext.jacocoToolVersion
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: project.ext.jacocoExcludedPackages)
        }))
    }
    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, excludes: project.ext.jacocoExcludedPackages)
            }))
        }
        rule {
            limit {
                minimum = 0.00 // Just a demo project -> I skip this
            }
        }
    }
    dependsOn jacocoTestReport
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register('buildCustomerTrades', GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/static/api/services/customer-trades.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "de.kaluza.generated.services.api"
    modelPackage = "de.kaluza.generated.model"
    configOptions = [
            interfaceOnly : "true",
            dateLibrary   : "java8",
            useSpringBoot3: "true",
            useTags       : "true"
    ]
}

tasks.register('codegen', GradleBuild) {
    tasks = ['buildCustomerTrades']
    doFirst {
        delete "$buildDir/generated"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('itest', Test) {
    description = "Run integration tests"
    group = "verification"
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath

    shouldRunAfter test
}

tasks.named('itest') {
    useJUnitPlatform()
}

tasks.register('ctest', Test) {
    description = "Run contract tests"
    group = "verification"
    testClassesDirs = sourceSets.ctest.output.classesDirs
    classpath = sourceSets.ctest.runtimeClasspath

    shouldRunAfter itest
}

tasks.named('ctest') {
    useJUnitPlatform()
}

tasks.register("verifyNoSnapshotDependencies") {
    group = "help"
    doLast {
        configurations.all.collect { it.dependencies }.flatten().each { dependency ->
            if (dependency.version?.endsWith("-SNAPSHOT") == true) {
                throw new GradleException("Dependency ${dependency.name} ${dependency.version} is a snapshot version")
            }
        }
    }
}

tasks.register("runAllTests") {
    group = "verification"
}

runAllTests.dependsOn test
runAllTests.dependsOn itest
runAllTests.dependsOn ctest

check.dependsOn runAllTests
check.dependsOn jacocoTestCoverageVerification
check.dependsOn verifyNoSnapshotDependencies

compileJava.dependsOn tasks.codegen